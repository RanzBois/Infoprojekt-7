/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package infoprojekt;

import java.awt.Graphics;

/**
 *
 * @author info
 */
public class Visuell extends javax.swing.JFrame {

    private Knoten[] alleKnoten;
    private double[][] abstaende;

    /**
     * Creates new form Visuell
     */
    public Visuell() {
        initComponents();

        delaySlider.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        knotenPanel = new javax.swing.JPanel();
        resetBtn = new javax.swing.JButton();
        delaySlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        erstelleBaumBtn = new javax.swing.JButton();
        anzahlKnotenTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        platzierungModusCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        simModusCombo = new javax.swing.JComboBox<>();
        runBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        knotenPanel.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout knotenPanelLayout = new javax.swing.GroupLayout(knotenPanel);
        knotenPanel.setLayout(knotenPanelLayout);
        knotenPanelLayout.setHorizontalGroup(
            knotenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        knotenPanelLayout.setVerticalGroup(
            knotenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        resetBtn.setText("Zürücksetzen");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        delaySlider.setMaximum(10);
        delaySlider.setMinorTickSpacing(1);
        delaySlider.setPaintTicks(true);
        delaySlider.setSnapToTicks(true);
        delaySlider.setToolTipText("Sekunden");
        delaySlider.setNextFocusableComponent(delaySlider);

        jLabel1.setText("Ausführung:");

        erstelleBaumBtn.setText("Erstellen");
        erstelleBaumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erstelleBaumBtnActionPerformed(evt);
            }
        });

        anzahlKnotenTxt.setText("10");
        anzahlKnotenTxt.setToolTipText("Anzahl Knoten");
        anzahlKnotenTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anzahlKnotenTxtActionPerformed(evt);
            }
        });

        jLabel3.setText("Anzahl Knoten:");

        platzierungModusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Zufällig (Automatisch)", "Manuell (Maus)", " " }));
        platzierungModusCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platzierungModusComboActionPerformed(evt);
            }
        });

        jLabel4.setText("Platzierung:");

        simModusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Einzelschritt", "Simulation" }));
        simModusCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simModusComboActionPerformed(evt);
            }
        });

        runBtn.setText("Los!");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(knotenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(platzierungModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(anzahlKnotenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(erstelleBaumBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(simModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(knotenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(anzahlKnotenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(platzierungModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(simModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(erstelleBaumBtn)
                            .addComponent(resetBtn)
                            .addComponent(runBtn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void erstelleBaumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erstelleBaumBtnActionPerformed
        if (platzierungModusCombo.getSelectedIndex() == 0) {
            //Zufällige Anordnung
            platziereZufaellig(
                    Integer.valueOf(anzahlKnotenTxt.getText()),
                    knotenPanel.getWidth(), knotenPanel.getHeight()
            );
            zeichneKnoten();
        } else {
            //Manuell
        }
    }//GEN-LAST:event_erstelleBaumBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runBtnActionPerformed

    private void simModusComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simModusComboActionPerformed

        delaySlider.setVisible(simModusCombo.getSelectedIndex() == 1);


    }//GEN-LAST:event_simModusComboActionPerformed

    private void platzierungModusComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platzierungModusComboActionPerformed

    }//GEN-LAST:event_platzierungModusComboActionPerformed

    private void anzahlKnotenTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anzahlKnotenTxtActionPerformed
        try {
            if (Integer.valueOf(anzahlKnotenTxt.getText()) < 1) {
                anzahlKnotenTxt.setText("0");
            }
        } catch (NumberFormatException e) {
            anzahlKnotenTxt.setText("0");
        }
    }//GEN-LAST:event_anzahlKnotenTxtActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        loeschen();

    }//GEN-LAST:event_resetBtnActionPerformed

    private void loeschen() {

        alleKnoten = null;
        abstaende = null;
        Graphics g = knotenPanel.getGraphics();
        g.clearRect(0, 0, knotenPanel.getWidth(), knotenPanel.getHeight());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visuell().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField anzahlKnotenTxt;
    private javax.swing.JSlider delaySlider;
    private javax.swing.JButton erstelleBaumBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel knotenPanel;
    private javax.swing.JComboBox<String> platzierungModusCombo;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JComboBox<String> simModusCombo;
    // End of variables declaration//GEN-END:variables

    private void platziereZufaellig(int anzahl, int maxX, int maxY) {

        if (anzahl < 0) {
            return;
        }

        loeschen();

        alleKnoten = new Knoten[anzahl];
        abstaende = new double[anzahl][anzahl];

        // Erzeuge alle Knoten mit zufälligen Koordinaten
        for (int idx = 0; idx < anzahl; idx++) {

            Knoten i = Knoten.erzeugeZufallsknoten(maxX, maxY);
            int j = 0;
            while (j < idx) {
                if (alleKnoten[j].deckend(i)) {
                    i = Knoten.erzeugeZufallsknoten(maxX, maxY);
                    continue;
                }
                j++;
            }
            alleKnoten[idx] = i;
        }

        // Berechnde die Absaände
        for (int j = 0; j < anzahl; j++) {
            for (int k = 0; k < anzahl; k++) {
                abstaende[j][k] = alleKnoten[j].abstand(alleKnoten[k]);
            }
        }

    }

    private void zeichneKnoten() {
        Graphics g = knotenPanel.getGraphics();

        for (int idx = 0; idx < alleKnoten.length; idx++) {
            g.fillRect(alleKnoten[idx].getX(), alleKnoten[idx].getY(), Knoten.breite, Knoten.breite);
        }
    }

}
