/**
 * Project:
 *
 *  Minimal Spanning Trees
 *  ESG Kornwestheim, KS1
 *
 * Authors:
 *
 * -´Aykon Kücük
 * - Leon Broßwitz
 *
 * (c) June 2018
 */
package infoprojekt;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;

/**
 *
 * @author info
 */
public class Visuell extends javax.swing.JFrame implements FocusListener, ActionListener {

    private static final int MINIMUM_NODES = 2;
    private static final int MAXIMUM_NODES = 2500;

    private Graph graph;

    /**
     * Creates new form Visuell
     */
    public Visuell() {
        initComponents();

        runBtn.setEnabled(false);
        runBtn.setVisible(true);

        anzahlKnotenTxt.addFocusListener(this);
        anzahlKnotenTxt.addActionListener(this);
        
         
   
    }

    private void checkAndFixValue() {
        if (anzahlKnotenTxt.getText().isEmpty()) {
            anzahlKnotenTxt.setText(String.valueOf(MINIMUM_NODES));
            return;
        }
        try {
            int value = Integer.parseInt(anzahlKnotenTxt.getText());
            if (value < 2) {
                anzahlKnotenTxt.setText(String.valueOf(MINIMUM_NODES));
            } else if (value > MAXIMUM_NODES) {
                anzahlKnotenTxt.setText(String.valueOf(MAXIMUM_NODES));
            }
        } catch (NumberFormatException e) {
            anzahlKnotenTxt.setText(String.valueOf(MINIMUM_NODES));
            return;

        }
    }

    public void focusLost(FocusEvent e) {
        checkAndFixValue();
    }

    public void actionPerformed(ActionEvent event) {

        checkAndFixValue();
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodePanel = new javax.swing.JPanel();
        resetBtn = new javax.swing.JButton();
        delaySlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        erstelleBaumBtn = new javax.swing.JButton();
        anzahlKnotenTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        platzierungModusCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        runBtn = new javax.swing.JButton();
        delayLbl = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        totalEdgesLbl = new javax.swing.JLabel();
        graphBuildCbx = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minimalaufspannende Bäume");
        setMaximumSize(new java.awt.Dimension(1024, 1024));
        setMinimumSize(new java.awt.Dimension(640, 640));
        setPreferredSize(new java.awt.Dimension(640, 640));

        nodePanel.setBackground(new java.awt.Color(0, 0, 0));
        nodePanel.setForeground(new java.awt.Color(255, 255, 255));
        nodePanel.setToolTipText("");
        nodePanel.setMaximumSize(new java.awt.Dimension(1024, 1024));
        nodePanel.setName(""); // NOI18N
        nodePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nodePanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout nodePanelLayout = new javax.swing.GroupLayout(nodePanel);
        nodePanel.setLayout(nodePanelLayout);
        nodePanelLayout.setHorizontalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        nodePanelLayout.setVerticalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        resetBtn.setText("Zürücksetzen");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        delaySlider.setMaximum(1000);
        delaySlider.setMinorTickSpacing(100);
        delaySlider.setPaintTicks(true);
        delaySlider.setSnapToTicks(true);
        delaySlider.setToolTipText("Sekunden");
        delaySlider.setNextFocusableComponent(delaySlider);
        delaySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delaySliderStateChanged(evt);
            }
        });

        jLabel1.setText("Simulation (Takt):");

        erstelleBaumBtn.setText("Erstellen");
        erstelleBaumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erstelleBaumBtnActionPerformed(evt);
            }
        });

        anzahlKnotenTxt.setText("10");
        anzahlKnotenTxt.setToolTipText("Anzahl Knoten");
        anzahlKnotenTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anzahlKnotenTxtActionPerformed(evt);
            }
        });

        jLabel3.setText("Anzahl Knoten:");

        platzierungModusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Zufällig (Automatisch)", "Manuell (Maus)", " " }));
        platzierungModusCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platzierungModusComboActionPerformed(evt);
            }
        });

        jLabel4.setText("Platzierung:");

        runBtn.setText("Los!");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Gesamtkosten:");

        graphBuildCbx.setText("Graphaufbau zeigen");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(anzahlKnotenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(graphBuildCbx))
                            .addComponent(platzierungModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(erstelleBaumBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalEdgesLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nodePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(anzahlKnotenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(graphBuildCbx))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(platzierungModusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(delayLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delaySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(erstelleBaumBtn)
                    .addComponent(resetBtn)
                    .addComponent(runBtn)
                    .addComponent(jLabel2)
                    .addComponent(totalEdgesLbl))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void erstelleBaumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erstelleBaumBtnActionPerformed
        if (platzierungModusCombo.getSelectedIndex() == 0) {
            if (anzahlKnotenTxt.getText().isEmpty()) {
                anzahlKnotenTxt.setText("2");
            }
            int nodeCount = Integer.valueOf(anzahlKnotenTxt.getText());
            if (nodeCount <= 0) {
                nodeCount = 2;
                anzahlKnotenTxt.setText(String.valueOf(nodeCount));
            }
            //Zufällige Anordnung
            platziereZufaellig(Integer.valueOf(anzahlKnotenTxt.getText()), nodePanel.getSize());
            drawGraph();
            runBtn.setEnabled(true);
            progressBar.setValue(0);

        } else {
            //Manuell
        }
    }//GEN-LAST:event_erstelleBaumBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        graph.setDelay(delaySlider.getValue());
        progressBar.setMaximum(graph.getNodeCount() - 1);
        progressBar.setValue(0);
        graph.minimalSpanningTree(this);
        runBtn.setEnabled(false);

    }//GEN-LAST:event_runBtnActionPerformed

    private void platzierungModusComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platzierungModusComboActionPerformed
        reset();
        erstelleBaumBtn.setVisible(platzierungModusCombo.getSelectedIndex() == 0);


    }//GEN-LAST:event_platzierungModusComboActionPerformed

    private void anzahlKnotenTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anzahlKnotenTxtActionPerformed

    }//GEN-LAST:event_anzahlKnotenTxtActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        reset();

        runBtn.setEnabled(false);

    }//GEN-LAST:event_resetBtnActionPerformed

    private void nodePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodePanelMouseClicked

        if (platzierungModusCombo.getSelectedIndex() == 1) {
            Graphics2D g2d = (Graphics2D) nodePanel.getGraphics();
            int x = evt.getX() - Node.width / 2;
            int y = evt.getY() - Node.width / 2;
            graph.addNode(graph.getNodeCount(), x, y);
            graph.draw(g2d, graphBuildCbx.isSelected());
            anzahlKnotenTxt.setText(String.valueOf(graph.getNodeCount()));
        }

        if (graph != null) {
            runBtn.setEnabled(graph.getNodeCount() > 1);
        }

    }//GEN-LAST:event_nodePanelMouseClicked

    private void delaySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delaySliderStateChanged
        delayLbl.setText(delaySlider.getValue() + " ms");

    }//GEN-LAST:event_delaySliderStateChanged

    /**
     *
     */
    private void reset() {

        graph = new Graph(nodePanel.getSize());
        nodePanel.getGraphics().fillRect(0, 0, nodePanel.getWidth(), nodePanel.getHeight());
        totalEdgesLbl.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visuell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visuell().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField anzahlKnotenTxt;
    private javax.swing.JLabel delayLbl;
    private javax.swing.JSlider delaySlider;
    private javax.swing.JButton erstelleBaumBtn;
    private javax.swing.JCheckBox graphBuildCbx;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel nodePanel;
    private javax.swing.JComboBox<String> platzierungModusCombo;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JLabel totalEdgesLbl;
    // End of variables declaration//GEN-END:variables

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public JPanel getPanel() {
        return nodePanel;
    }

    public JLabel getTotalEdgesLbl() {
        return totalEdgesLbl;
    }

    /**
     *
     */
    private void platziereZufaellig(int count, Dimension dimension) {

        if (count < 0) {
            return;
        }

        reset();

        graph = new Graph(dimension);
        graph.init(count);
        graph.fillRandomly();

    }

    /**
     *
     */
    private void drawGraph() {

        graph.draw(nodePanel.getGraphics(), graphBuildCbx.isSelected());
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

}
